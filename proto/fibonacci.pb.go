// Code generated by protoc-gen-go.
// source: fibonacci.proto
// DO NOT EDIT!

/*
Package fibonacci is a generated protocol buffer package.

It is generated from these files:
	fibonacci.proto

It has these top-level messages:
	Number
	Result
*/
package fibonacci

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Number struct {
	Value int32 `protobuf:"varint,1,opt,name=value" json:"value,omitempty"`
}

func (m *Number) Reset()                    { *m = Number{} }
func (m *Number) String() string            { return proto.CompactTextString(m) }
func (*Number) ProtoMessage()               {}
func (*Number) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Number) GetValue() int32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type Result struct {
	Value int32 `protobuf:"varint,1,opt,name=value" json:"value,omitempty"`
}

func (m *Result) Reset()                    { *m = Result{} }
func (m *Result) String() string            { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()               {}
func (*Result) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Result) GetValue() int32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func init() {
	proto.RegisterType((*Number)(nil), "fibonacci.Number")
	proto.RegisterType((*Result)(nil), "fibonacci.Result")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for FibonacciService service

type FibonacciServiceClient interface {
	Calc(ctx context.Context, in *Number, opts ...grpc.CallOption) (*Result, error)
	Health(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
}

type fibonacciServiceClient struct {
	cc *grpc.ClientConn
}

func NewFibonacciServiceClient(cc *grpc.ClientConn) FibonacciServiceClient {
	return &fibonacciServiceClient{cc}
}

func (c *fibonacciServiceClient) Calc(ctx context.Context, in *Number, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/fibonacci.FibonacciService/Calc", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fibonacciServiceClient) Health(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/fibonacci.FibonacciService/Health", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FibonacciService service

type FibonacciServiceServer interface {
	Calc(context.Context, *Number) (*Result, error)
	Health(context.Context, *google_protobuf1.Empty) (*google_protobuf1.Empty, error)
}

func RegisterFibonacciServiceServer(s *grpc.Server, srv FibonacciServiceServer) {
	s.RegisterService(&_FibonacciService_serviceDesc, srv)
}

func _FibonacciService_Calc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Number)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FibonacciServiceServer).Calc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fibonacci.FibonacciService/Calc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FibonacciServiceServer).Calc(ctx, req.(*Number))
	}
	return interceptor(ctx, in, info, handler)
}

func _FibonacciService_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf1.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FibonacciServiceServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fibonacci.FibonacciService/Health",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FibonacciServiceServer).Health(ctx, req.(*google_protobuf1.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _FibonacciService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fibonacci.FibonacciService",
	HandlerType: (*FibonacciServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Calc",
			Handler:    _FibonacciService_Calc_Handler,
		},
		{
			MethodName: "Health",
			Handler:    _FibonacciService_Health_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fibonacci.proto",
}

func init() { proto.RegisterFile("fibonacci.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 217 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x4f, 0xcb, 0x4c, 0xca,
	0xcf, 0x4b, 0x4c, 0x4e, 0xce, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x84, 0x0b, 0x48,
	0xc9, 0xa4, 0xe7, 0xe7, 0xa7, 0xe7, 0xa4, 0xea, 0x27, 0x16, 0x64, 0xea, 0x27, 0xe6, 0xe5, 0xe5,
	0x97, 0x24, 0x96, 0x64, 0xe6, 0xe7, 0x15, 0x43, 0x14, 0x4a, 0x49, 0x43, 0x65, 0xc1, 0xbc, 0xa4,
	0xd2, 0x34, 0xfd, 0xd4, 0xdc, 0x82, 0x92, 0x4a, 0x88, 0xa4, 0x92, 0x1c, 0x17, 0x9b, 0x5f, 0x69,
	0x6e, 0x52, 0x6a, 0x91, 0x90, 0x08, 0x17, 0x6b, 0x59, 0x62, 0x4e, 0x69, 0xaa, 0x04, 0xa3, 0x02,
	0xa3, 0x06, 0x6b, 0x10, 0x84, 0x03, 0x92, 0x0f, 0x4a, 0x2d, 0x2e, 0xcd, 0x29, 0xc1, 0x2e, 0x6f,
	0x34, 0x81, 0x91, 0x4b, 0xc0, 0x0d, 0xe6, 0x90, 0xe0, 0xd4, 0xa2, 0xb2, 0xcc, 0xe4, 0x54, 0x21,
	0x3d, 0x2e, 0x16, 0xe7, 0xc4, 0x9c, 0x64, 0x21, 0x41, 0x3d, 0x84, 0xa3, 0x21, 0xb6, 0x48, 0x21,
	0x0b, 0x41, 0x0c, 0x56, 0x62, 0x10, 0xf2, 0xe1, 0x62, 0xf3, 0x48, 0x4d, 0xcc, 0x29, 0xc9, 0x10,
	0x12, 0xd3, 0x83, 0x38, 0x56, 0x0f, 0xe6, 0x58, 0x3d, 0x57, 0x90, 0x63, 0xa5, 0x70, 0x88, 0x2b,
	0x09, 0x35, 0x5d, 0x7e, 0x32, 0x99, 0x89, 0x47, 0x88, 0x4b, 0xbf, 0xcc, 0x50, 0x3f, 0x03, 0x6c,
	0x86, 0x13, 0x77, 0x14, 0x22, 0x68, 0x92, 0xd8, 0xc0, 0x1a, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff,
	0xff, 0x61, 0xa7, 0x8e, 0xc8, 0x3f, 0x01, 0x00, 0x00,
}
